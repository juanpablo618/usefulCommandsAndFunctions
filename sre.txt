Designing Reliable Solutions

Resolución conceptual ✅
Ante un llamado a una App que devuelve error el 50% de las veces, se necesita que esta tasa de error sea de a lo sumo un 5%. Para resolver este desafío se necesita conocer e implementar el patrón Retry para volver a llamar a la App en caso de que haya un error antes de dar una respuesta al usuario. Entonces, la probabilidad de falla compuesta de dos llamados consecutivos es del 25% (0.5 x 0.5 = 0.25). De esta manera se puede llegar a la conclusión de que si se quiere tener un error menor al 5% uno puede repetir la llamada hasta satisfacer dicha condición. En particular, cuando se repite el llamado 5 veces se encuentra que la app fallará en el 3.125% de la veces y, por tanto, se cumplirá con el objetivo planteado. Es vital, luego de hacer este cálculo estimado, probar empíricamente que la hipótesis de solución se valida en los hechos. 

Patrón Retry
Para lograr la disponibilidad deseada, el patrón Retry suele ser de gran importancia. El mismo permite al sistema volver a intentar un llamado en caso que este falle de manera transitoria, como interrupciones breves de red o sobrecargas temporales de un servicio. En lugar de considerar inmediatamente una operación como fallida, el sistema reintenta automáticamente la misma operación después de un breve período. Un aspecto crucial en SRE es encontrar el equilibrio correcto en la política de reintentos. 
Demasiados reintentos rápidos pueden sobrecargar aún más un sistema ya comprometido, mientras que pocos reintentos o intervalos de tiempo muy largos pueden degradar la experiencia del usuario, impactando negativamente en la performance del sitio. A su vez es fundamental monitorizar cuidadosamente los patrones de reintento para identificar y resolver problemas subyacentes en la infraestructura o en la aplicación. Una alta tasa de reintentos puede ser un indicador de problemas más profundos que necesitan ser abordados de otras maneras. 
En resumen, el patrón Retry es una herramienta esencial para mantener la operatividad y la calidad del servicio en entornos inciertos y propensos a errores. Se utiliza con cuidado y en conjunto con otras estrategias, como el backoff, para asegurar que los sistemas sean tanto resilientes como eficientes.
Es importante tener en cuenta que existen circunstancias en las que la función Retry no es útil, como por ejemplo:
* Si un error es definitivo o no transitorio, como un error de validación de datos o una falla crítica de sistema, el reintento no es útil. En estos casos es mejor manejar el error sin reintentar, ya que el problema no se resolverá con intentos adicionales.
* Donde los reintentos pueden ser costosos en términos de recursos o tiempo (por ejemplo, operaciones que consumen mucha CPU o ancho de banda), puede ser preferible abordar el error de manera diferente, como alertar a un operador humano o usar una estrategia de fallback.

Función Backoff
La función backoff solo tiene sentido dentro de un Retry y permite aumentar el tiempo entre cada llamado recurrente del Retry. Es especialmente útil cuando hay riesgo de que el sistema se sobrecargue en una red congestionada, ya sea por ser un servicio muy demandado y/o que supone una alta exigencia a los servidores. Hay situaciones en las que aplicar la función backoff no es necesario o incluso puede ser contraproducente: 
* En sistemas donde la entrega está garantizada o gestionada por otro mecanismo (como las colas de mensajes con confirmación de entrega), el backoff puede no ser necesario, ya que el sistema subyacente maneja los reintentos y la fiabilidad.
* En aplicaciones de tiempo real donde la respuesta inmediata es crítica (como sistemas de control industrial o aplicaciones de trading en tiempo real), el backoff puede no ser adecuado, ya que incluso un pequeño retraso puede ser inaceptable.
* Limitaciones de Acuerdos de Nivel de Servicio (SLAs): Si los SLAs establecen una respuesta o resolución dentro de un marco de tiempo específico, el backoff puede no ser viable, ya que aumenta el tiempo total de respuesta.
* Cargas de Trabajo Predecibles y Estables: En ambientes donde la carga de trabajo y el tráfico son predecibles y estables, y el sistema está dimensionado adecuadamente para manejar esta carga, la necesidad de una lógica de backoff es mínima.
* Contexto de Uso Único o Transacciones Críticas: En operaciones de uso único o transacciones críticas, donde un fallo debe ser inmediatamente notificado o manejado de manera especial, el backoff puede no ser apropiado.
* Pruebas de Estrés o Simulación de Cargas: Durante las pruebas de estrés o simulaciones para evaluar la capacidad de un sistema, los reintentos inmediatos pueden ser útiles para generar una carga intensa y evaluar cómo responde el sistema.
En general, la decisión de aplicar o no la función de backoff depende del contexto específico, la naturaleza del error, y las características del sistema y de la aplicación. Es importante evaluar si el backoff añadirá valor y mejorará la resiliencia del sistema en un escenario dado

